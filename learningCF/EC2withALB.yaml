AWSTemplateFormatVersion: 2010-09-09
Description: Creates an instance with an autoscaling group, behind an application load balancer.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the web server
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
Mappings:
  SubnetConfig: 
  VPC:
    CIDR: 10.0.0.0/16
  Public1:
    CIDR: 10.0.0.0/24
  Public2:
    CIDR: 10.0.1.0/24
Resources: 
  WebServerInstanceType: 
    Type: 'AWS::EC2::Instance'
    Description: Webserver EC2 Instance type
    Default: t2.small
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
  WebServerCount:
    Description: number of instances to launch for the webserver server
    Type: Number 
    Default: '1'
  PublicApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets:
        - Fn::ImportValue: NetworkStack-SubnetID-1
        - Fn::ImportValue: NetworkStack-SubnetID-2
      SecurityGroups:
        - !Ref PublicLoadBalancerSecurityGroup
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        - Fn::ImportValue: NetworkStack-VPCID
  ALBListner:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions: 
        - Type: 'forward'
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref PublicApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
  PublicLoadBalancerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Public ELB with Security Grouup with HTTP access on port 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
  WebserverSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow access from load balancer as well as HTP and HTTPS traffic. 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SecurityGroupId: !Ref PublicLoadBalancerSecurityGroup 
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
  WebServerFleet:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: NetworkStack-SubnetID
        - Fn::ImportValue: NetworkStack-SubnetID2
      LaunchConfigurationName: !Ref WebServerLaunchConfig
      MinSize: '2'
      MaxSize: '5'
      TargetGroupARNs:
        - !Ref ALBTargetGroup
    CreationPolicy: 
       ResourceSignal:
          Timeout: PT45M
          Count: !Ref WebServerCount
    UpdatePolicy: 
       AutoscalingRollingUpdate:
          MinInstanceService: '1'
          MinBatchSize: '1'
          PauseTime: PT15M
          WaitingOnResourcesSignals: 'true'
  ASGScalingPolicyHigh:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebServerFleet
      PolicyType: TargetTracking
      AdjustmentType: ChangeInCapacity
      StepAdjustments: 
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 1
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 2
      Statistic: Average
      Threshold: 90
      AlarmDescription: 'Scale out if CPU > 90% for 2 minutes'
      Period: 60
      AlarmActions:
      - !Ref ASGScalingPolicyHigh
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          !Ref WebServerFleet
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
  WebServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      SecurityGroups: !Ref PublicLoadBalancerSecurityGroup
      InstanceType: !Ref InstanceTypeParameter
      UserData: !Base64 |
        #!/bin/bash -x
        yum install -y httpd
        systemctl start httpd
        systemctl enable http
      EbsOptimized: true
