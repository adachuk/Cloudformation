AWSTemplateFormatVersion: 2010-09-09
Description: Creates an instance with an autoscaling group, behind an application load balancer. 
Parameters:
  InstanceTypeParameter:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
    Description: "Select an instance type."
  WebServerCount:
    Description: number of instances to launch for the webserver server
    Type: Number
    Default: '1'
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public1:
      CIDR: 10.0.0.0/24
    Public2:
      CIDR: 10.0.1.0/24
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !FindInMap
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackId'
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      MapPublicIpOnLaunch: 'true'
      CidrBlock: !FindInMap 
        - SubnetConfig
        - Public1
        - CIDR
      Tags:
        - Key: Name
          Value: Public
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      MapPublicIpOnLaunch: 'true'
      CidrBlock: !FindInMap 
        - SubnetConfig
        - Public2
        - CIDR
      Tags:
        - Key: Name
          Value: Public
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackId'
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackId'
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PublicApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Subnets: 
         - !Ref PublicSubnet1
         - !Ref PublicSubnet2
      SecurityGroups: 
         - !Ref PublicLoadBalancerSecurityGroup
  ALBListner: 
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
        DefaultActions:
           - Type: forward
           - TargetGroupArn: !Ref ALBTargetGroup
        LoadBalancerArn: !Ref PublicApplicationLoadBalancer
        Port: 80
        Protocol: HTTP 
  ALBTargetGroup: 
    Type: AWS::ElasticLoadBalancingV2::TargetGroup 
    Properties: 
        HealthCheckIntervalSeconds: 90
        HealthCheckTimeoutSeconds: 60 
        HealthyThreasholdCount: 3
        Port: 80
        Protocol: HTTP
        UnhealthyThreasholdCount: 5
        VpcId: !Ref VPC
  PublicLoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Public ELB with Security Grouup with HTTP access on port 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
  WebServerFleet:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: PublicRoute
    Properties: 
       VPCZoneIdentifier: 
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
       LaunchConfigurationName: !Ref WebServerLaunchConfig
       MinSize: 1
       MaxSize: 10 
       DesiredCapacity: !Ref WebServerCount
       TargetGroupARNS: 
          - !Ref ALBTargetGroup 
    CreationPolicy: 
       ResourceSignal:
          Timeout: PT45M
          Count: !Ref WebServerCount
    UpdatePolicy: 
       AutoscalingRollingUpdate:
          MinInstanceService: '1'
          MinBatchSize: '1'
          PauseTime: PT15M
          WaitingOnResourcesSignals: 'true'
  ASGScalingPolicyHigh:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebServerFleet
      PolicyType: TargetTracking
      AdjustmentType: ChangeInCapacity
      StepAdjustments: 
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 1
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 2
      Statistic: Average
      Threshold: 90
      AlarmDescription: 'Scale out if CPU > 90% for 2 minutes'
      Period: 60
      AlarmActions:
      - !Ref ASGScalingPolicyHigh
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          !Ref WebServerFleet
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
  WebServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      SecurityGroups: !Ref PublicLoadBalancerSecurityGroup
      InstanceType: !Ref InstanceTypeParameter
      UserData: !Base64 |
        #!/bin/bash -x
        yum install -y aws-cfn-bootstrap
      EbsOptimized: true
  WebSeverSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow access from load balancer and HTTP traffic. 0
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        SecurityGroupId: !Ref PublicLoadBalancerSecurityGroup
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0